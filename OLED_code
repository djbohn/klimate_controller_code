// connect arduino to OLED accordingly:
#define sclk 4  // CL
#define mosi 5  // SI
#define dc   2  // DC
#define cs   6  // OC
#define rst  -1  // R

//#include <Time.h>

// Color definitions
#define BLACK           0x0000
#define BLUE            0x001F
#define RED             0xF800
#define GREEN           0x07E0
#define CYAN            0x07FF
#define MAGENTA         0xF81F
#define YELLOW          0xFFE0  
#define WHITE           0xFFFF
#define Navy            0x000F      /*   0,   0, 128 */
#define DarkGreen       0x03E0      /*   0, 128,   0 */
#define DarkCyan        0x03EF      /*   0, 128, 128 */
#define Maroon          0x7800      /* 128,   0,   0 */
#define Purple          0x780F      /* 128,   0, 128 */
#define Olive           0x7BE0      /* 128, 128,   0 */
#define LightGrey       0xC618      /* 192, 192, 192 */
#define DarkGrey        0x7BEF      /* 128, 128, 128 */
#define Orange          0xFD20      /* 255, 165,   0 */
#define GreenYellow     0xAFE5      /* 173, 255,  47 */
#define Pink            0xF81F

#include <Adafruit_GFX.h>
//#include <doge.h>
//#include <qr.h>
#include <Adafruit_SSD1351.h>
#include <SPI.h>
#include <RFduinoGZLL.h>

Adafruit_SSD1351 tft = Adafruit_SSD1351(cs, dc, rst); //CHANGED THIS

const int buttonPinDown = 0;     // the number of the plusButton  pin1
const int buttonPinUp = 1;     // the number of the minusbutton pin2
const int buttonPinOnOff = 3;

//const int onOffButton = 12;
int buttonStateDown = 0;         // variable for reading the plusbutton1  status
int buttonStateUp = 0;         // variable for reading the minusbutton2 status
int buttonStateOnOff = 0;              // on/off not being used yet
int temp = 75;                // initial tempurature
float batteryVoltage;

device_t role = HOST;

// debounce time (in ms)
int debounce_time = 10;

// maximum debounce timeout (in ms)
int debounce_timeout = 100;

// starting for BLE state is off
char state = 0;

//float temp = 75;                  // initial tempurature
bool  celcius = false;
int   MAINCOLOR = BLUE;
float previousTemp = 0;              
float sumVoltage = 0.000;
int voltageReadings = 0;
float finalVoltage = 0;
float lastPercent = 0;
int   brightness = 15;
const int numSnowFlakes = 70;
bool sleepMode = false;
//Snowflake snowflake[50];

/***********************************************************************
 * Snowflake structure. For displaying snow on the screen when temp
 * drops to 32F or below. Snowflakes are place in random places on screen.
 ***********************************************************************/
/*struct Snowflake
{
  int x;
  int y;
};
Snowflake snowflake[numSnowFlakes];*/

int previous = HIGH;
unsigned long firstTime;
int count = 0;
bool power = 0;
int dispType = 0;
int previousPercent = 0;

long previousMillis = 0;        // will store last time LED was updated

// the following variable is a long because the time, measured in miliseconds,
// will quickly become a bigger number than can be stored in an int.
// set at 10 second intervals to timeout screen (turn off) (in milliseconds)
long sleepTime = 15000;           

struct data_t
{
  int temp;     // (integer temperature values)
  // the compiler will insert 3 bytes of padding here so b is aligned on a dword boundary
  int units;    // (0: Fahrenheit, 1: Celcius)
  int color;    // (HEX values)
  int dim;      // (integer 0 - 15)
  long sleepTime;
  int dispType; // (0: temp digital display, 1: Klim logo, 2: moving needle)
};

// select a flash page that isn't in use (see Memory.h for more info)
#define  MY_FLASH_PAGE  251

// double level of indirection required to get gcc
// to apply the stringizing operator correctly
#define  str(x)   xstr(x)
#define  xstr(x)  #x

struct data_t value = { temp, celcius, MAINCOLOR, brightness, sleepTime, dispType };
data_t *p = (data_t*)ADDRESS_OF_PAGE(MY_FLASH_PAGE);

void setup(void) 
{
  Serial.begin(9600);
  Serial.println("Start up. . .");
  // initialize the pushbutton pin as an input: 
  pinMode(buttonPinDown, INPUT);  
  pinMode(buttonPinUp, INPUT);
  pinMode(buttonPinOnOff, INPUT);

   // start the GZLL stack
  RFduinoGZLL.begin(role);
  tft.begin();

  if (p->temp != -1)
  {
    temp = p->temp;
    celcius = p->units;
    MAINCOLOR = p->color;
    brightness = p->dim;
    sleepTime = p->sleepTime;
    dispType = p->dispType; // not using this yet...
  }
  else
  {
    value = { temp, celcius, MAINCOLOR, brightness, sleepTime, dispType };
    flashPageErase(PAGE_FROM_ADDRESS(p));
    flashWriteBlock(p, &value, sizeof(value));
  }

  tft.adjustBrightness(brightness);
  tft.fillScreen(BLACK);  // erase previous stuff
   
  drawText("Temp:", MAINCOLOR, 0, 0, 3); // "Temp:" header
  if (celcius)
    printTempUp(temp, 'c'); // print initial tempurature (75 F)
  else
    printTempUp(temp, 'f');
    
  //tft.setTextSize(1);
  //tft.setCursor(0, 80);
  //tft.setTextColor(MAINCOLOR);
  //tft.fillRect(0, 50, 96, 20, BLACK);  
  //tft.print("Hour:");
  //tft.print(hour());
  //hour();

/*  for (int i = 0; i < numSnowFlakes; i++) // initialize random snowflakes //snowflakes not working with RFduino
  {
    snowflake[i].x = random(94); // 2 less than the width  of screen
    snowflake[i].y = random(62); // 2 less than the length of screen
  }*/
  Serial.println("Done");
}

/*******************************************
 * debounce--not used yet.
 *******************************************/
/*int debounce(int button, int state2)
{
  int start = millis();
  int debounce_start = start;
  
  while (millis() - start < debounce_timeout)
    if (digitalRead(button) == state2)
    {
      if (millis() - debounce_start >= debounce_time)
        return 1;
    }
    else
      debounce_start = millis();

  return 0;
}*/
/***********************************
 * delay--not used yet.
 ***********************************/
/*int delay_until_button(int button, int state2)
{
  while (! debounce(button, state2))
    ;
}*/

/*****************************************
 * Check Battery- This code was added to measure the battery level.
 ****************************************/
void checkBattery()
{
  analogReference(VBG); // Sets the Reference to 1.2V band gap           
  analogSelection(VDD_1_3_PS);  //Selects VDD with 1/3 prescaling as the analog source
  int sensorValue = analogRead(3); // the pin has no meaning, it uses VDD pin
  batteryVoltage = sensorValue * (3.6 / 1023.0); // convert value to voltage
  //Serial.println(batteryVoltage);
  delay(100);
  
  analogReference(DEFAULT); // switch back to default reference     
}

/****************************************************************
 * The loop function will happen over and over, checking for button
 * status and then increasing or decreasing the tempurature accordingly
 ****************************************************************/
void loop() 
{
  //Serial.println("Hello");
  checkBattery();
  // read the state of the pushbutton value:
  buttonStateDown = digitalRead(buttonPinDown);
  buttonStateUp = digitalRead(buttonPinUp);
  buttonStateOnOff = digitalRead(buttonPinOnOff);

  Serial.print(state);
  Serial.print('\n');

  unsigned long currentMillis = millis();
 
  if(currentMillis - previousMillis > sleepTime) 
  {
    // save the last time you blinked the LED 
    previousMillis = currentMillis;   
    tft.displayOff();
    sleepMode = true;
  }

  if (buttonStateOnOff == LOW)// && previous == LOW && count >= 2 && count < 10) 
  {
    //tft.displayOn();
    previousMillis = currentMillis; 
    count = 0;
    //power = !power;
    if (sleepMode == false)
    {
      menu();
      delay(500);
      tft.fillScreen(BLACK);
      drawText("Temp:", MAINCOLOR, 0, 0, 3); // "Temp:" header
      if (celcius)  
        printTempUp(temp, 'c');
      else
        printTempUp(temp, 'f');
      lastPercent = 0;
      tft.adjustBrightness(brightness);
      value = { temp, celcius, MAINCOLOR, brightness, sleepTime, dispType };
      flashPageErase(PAGE_FROM_ADDRESS(p));
      flashWriteBlock(p, &value, sizeof(value));
      //displayBattery(previousPercent);
      currentMillis = millis();
      previousMillis = currentMillis;
    }
    else
    {
      tft.displayOn();
      delay(400);
      sleepMode = false;
    }
  }

  //when button is pressed, target temperature is decreased by one and displayed
  if (buttonStateDown == LOW) 
  {   
    //tft.displayOn();
    previousMillis = currentMillis;
    if (sleepMode == false)
    { 
    if (temp > 10) 
    {
      temp--;
      if (celcius)
        printTempDown(temp, 'c');
      else
        printTempDown(temp, 'f');
      state = temp;
      value = { temp, celcius, MAINCOLOR, brightness, sleepTime, dispType };
      flashPageErase(PAGE_FROM_ADDRESS(p));
      flashWriteBlock(p, &value, sizeof(value));
    }
    //downArrow();
    }
    else
    {
      tft.displayOn();
      delay(400);
      sleepMode = false;
    }
  }
  //when button is pressed, target temperature is increased by one and displayed 
  else if (buttonStateUp == LOW)
  { 
    //tft.displayOn();
    previousMillis = currentMillis;   
    if (sleepMode == false)
    {
    if (temp < 130) 
    {
      temp++;
      if (celcius)
        printTempUp(temp, 'c'); 
      else
        printTempUp(temp, 'f');
      state = temp;
    }
    //upArrow();
    value = { temp, celcius, MAINCOLOR, brightness, sleepTime, dispType };
    flashPageErase(PAGE_FROM_ADDRESS(p));
    flashWriteBlock(p, &value, sizeof(value));
    }
    else
    {
      tft.displayOn();
      delay(400);
      sleepMode = false;
      
    }
  }
  else
  {
    state = temp;
  }

  const unsigned long tenMilliSeconds = .01 * 1000UL;  
  // initialize such that a reading is due the first time through loop()
  static unsigned long lastSampleTime = 0 - tenMilliSeconds;  
  unsigned long now = millis();
  // this code averages 500 values over 5 seconds.
  float percent;
  if (now - lastSampleTime >= tenMilliSeconds)
  {
    sumVoltage += batteryVoltage; //sums all the voltage samples
    voltageReadings++;
    lastSampleTime += tenMilliSeconds;
  }
  if (voltageReadings == 50) // 100 * .01s = 5s
  { 
    finalVoltage = sumVoltage / 50.00;
    percent  = finalVoltage/3.3*100;
    if (lastPercent < percent)
      ;//displayBattery(percent);
    lastPercent = percent;
    sumVoltage = 0;
    voltageReadings = 0;
  }

  previousTemp = temp;
  previous = buttonStateOnOff;
  previousPercent = percent;
}
// END LOOP()

/********************************************************************
 * Displays Voltage of Arduino, and a percentage out of 5 Volts.
 ********************************************************************/
void displayBattery(int percent)
{
  tft.setTextSize(1);
  tft.setCursor(0, 60);
  tft.setTextColor(MAINCOLOR);
  //            x,  y,  w, l, color
  tft.fillRect(49, 60, 22, 7, BLACK);  
  tft.print("Battery:");
  
  if (percent > 100)
    tft.print(100);
  else
    tft.print(percent); // /10)*10); // add /10*10 to get just 10ths.
  tft.print("%");
  if (percent < 83)
  {
    tft.setTextColor(RED);
    tft.print(" LowBat");
  }
}

/********************************************************************
 * Sub Menu for changing between Farenheight and Celsius.
 ********************************************************************/
void subMenuFC()
{
  int selectorFC = 0;
  int lastSelectorFC = -1;
  tft.fillScreen(BLACK);
  tft.setCursor(0,0);
  tft.setTextColor(MAINCOLOR);
  tft.setTextSize(2);
  tft.print("Units:");
  tft.setTextColor(MAINCOLOR);
  
  while (1)
  {
    buttonStateDown  = digitalRead(buttonPinDown);
    buttonStateUp    = digitalRead(buttonPinUp);
    buttonStateOnOff = digitalRead(buttonPinOnOff);

    if (buttonStateDown == LOW)
    {    
      if (selectorFC < 2)
        selectorFC++;
      delay(200);
    }
  
    if (buttonStateUp == LOW)
    {   
      if (selectorFC > 0)
        selectorFC--;
      delay(200);
    }

    if (buttonStateOnOff == LOW)
    {
      if (selectorFC == 0)
      {
        if (celcius == true) // only change to F if it was C previously
        {
          celcius = false;
          temp = temp * (9.0 / 5.0) + 32;
        }
        return;
      }
      else if (selectorFC == 1) // only change to C if it was F previously
      {
        if (celcius == false)
        {
          celcius = true;
          temp = 5.0 / 9.0 * (temp - 32);
        }
        return;
      }
      else if (selectorFC == 2)
        return;
    }

    if (selectorFC == 0 && selectorFC != lastSelectorFC)
    {
      if (lastSelectorFC == 1)
        tft.fillRect(0, 32, 130, 14, BLACK);

      tft.fillRect(0, 16, 130, 14, MAINCOLOR);
      tft.setCursor(0,16);
      tft.setTextColor(BLACK);
      tft.print(" ");
      tft.print((char)247);
      tft.print("F");
      tft.setCursor(0,32);
      tft.setTextColor(MAINCOLOR);
      tft.print(" ");
      tft.print((char)247);
      tft.print("C");
      tft.setCursor(0,48);
      tft.setTextColor(MAINCOLOR);
      tft.print(" < Back");
    }
    else if (selectorFC == 1 && selectorFC != lastSelectorFC)
    {
      if (lastSelectorFC == 0)
        tft.fillRect(0, 16, 130, 14, BLACK);

      if (lastSelectorFC == 2)
        tft.fillRect(0, 48, 130, 14, BLACK);

      tft.fillRect(0, 32, 130, 14, MAINCOLOR);
      tft.setCursor(0,16);
      tft.setTextColor(MAINCOLOR);
      tft.print(" ");
      tft.print((char)247);
      tft.print("F");
      tft.setCursor(0,32);
      tft.setTextColor(BLACK);
      tft.print(" ");
      tft.print((char)247);
      tft.print("C");
      tft.setCursor(0,48);
      tft.setTextColor(MAINCOLOR);
      tft.print(" < Back");
    }
    else if (selectorFC == 2 && selectorFC != lastSelectorFC)
    {
      tft.fillRect(0, 32, 130, 14, BLACK);
      tft.fillRect(0, 48, 130, 14, MAINCOLOR);
      tft.setCursor(0,32);
      tft.setTextColor(MAINCOLOR);
      tft.print(" ");
      tft.print((char)247);
      tft.print("C");
      tft.setCursor(0,48);
      tft.setTextColor(BLACK);
      tft.print(" < Back");
    }
    lastSelectorFC = selectorFC;
  }
}

/*********************************************************
 * Adjust the brightness, range from 0-15.
 *********************************************************/
void changeBrightness()
{
  tft.fillScreen(BLACK);
  drawText("Dim:", MAINCOLOR, 0, 0, 2);
  tft.setCursor(0,16);
  tft.setTextSize(3);
  tft.setTextColor(MAINCOLOR);
  tft.print(" ");
  tft.print(brightness+1); // to display 1-16 instead of actual 0-15.
  
  while (1)
  {
    buttonStateDown  = digitalRead(buttonPinDown);
    buttonStateUp    = digitalRead(buttonPinUp);
    buttonStateOnOff = digitalRead(buttonPinOnOff);

    if (buttonStateDown == LOW)
    {    
      if (brightness > 0)
      {
        tft.fillRect(0, 16, 130, 21, BLACK);
        brightness--;
        tft.setCursor(0,16);
        tft.setTextSize(3);
        tft.setTextColor(MAINCOLOR);
        tft.print(" ");
        tft.print(brightness+1);
        tft.adjustBrightness(brightness);
        delay(200);
      }
      else
        brightness = 16;
    }
  
    if (buttonStateUp == LOW)
    {   
      if (brightness < 15)
      {
        tft.fillRect(0, 16, 130, 21, BLACK);
        brightness++;
        tft.setCursor(0,16);
        tft.setTextSize(3);
        tft.setTextColor(MAINCOLOR);
        tft.print(" ");
        tft.print(brightness+1);
        tft.adjustBrightness(brightness);
        delay(200);
      }
      else
        brightness = -1;
    }

    if (buttonStateOnOff == LOW)
      return;
  }
}

/*********************************************************
 * Switch colors, but not sure of what yet... Do we want all
 * the green headings chnaging to the same color too now?
 *********************************************************/
void changeColor()
{
  tft.fillScreen(BLACK);
  drawText("Colors:", MAINCOLOR, 0, 0, 2);
  tft.setCursor(0,16);
  tft.setTextSize(3);
  tft.setTextColor(BLUE);
  tft.fillRect(0, 16, 130, 14, MAINCOLOR);
  tft.setCursor(0,16);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print(" ");

  int colors[17] = {BLUE, CYAN, GREEN, YELLOW, MAGENTA, RED, WHITE,
                   Navy, DarkGreen, DarkCyan, Maroon, Purple, Olive,
                   DarkGrey, Orange, GreenYellow, Pink};
  char words[17][20] = {"Blue", "Cyan", "Green", "Yellow", "Magenta", "Red", 
                        "White", "Navy", "DrkGreen", "DrkCyan", "Maroon", 
                        "Purple", "Olive", "Grey", "Orange", 
                        "GrnYellow", "Pink"};
  int i = 0;

  for (i = 0; i < 17; i++)
  {
    if (colors[i] == MAINCOLOR)
      break;
  }
  tft.print(words[i]);
  
  while (1)
  {
    buttonStateDown  = digitalRead(buttonPinDown);
    buttonStateUp    = digitalRead(buttonPinUp);
    buttonStateOnOff = digitalRead(buttonPinOnOff);

    if (buttonStateDown == LOW)
    {    
      i--;
      if (i == -1) // for wrapping around the array
        i = 16;
      tft.fillRect(0, 16, 130, 14, colors[i]);
      tft.setCursor(0,16);
      tft.setTextColor(BLACK);
      tft.setTextSize(2);
      tft.print(" ");
      tft.print(words[i]);
      delay(300);
    }
  
    if (buttonStateUp == LOW)
    {   
      i++;
      if (i == 17) // for wrapping around the array
        i = 0;
      tft.fillRect(0, 16, 130, 14, colors[i]);
      tft.setCursor(0,16);
      tft.setTextColor(BLACK);
      tft.setTextSize(2);
      tft.print(" ");
      tft.print(words[i]);
      delay(300);
    }

    if (buttonStateOnOff == LOW)
    {
      MAINCOLOR = colors[i];
      return;
    }
  } 
}

void screenTimeout()
{
  int array[4] = {15, 30, 45, 60};
  int selector = 0;
  
  if ((sleepTime / 1000) == 30)
    selector = 1;
  else if ((sleepTime / 1000) == 45)
    selector = 2;
  else if ((sleepTime / 1000) == 60)
    selector = 3;
    
  tft.fillScreen(BLACK);
  drawText("Screen\nTimeout:", MAINCOLOR, 0, 0, 2); 
  tft.setCursor(0,32);
  tft.setTextSize(3);
  tft.setTextColor(MAINCOLOR);
  tft.print(" ");
  tft.print(array[selector]);
  tft.setTextSize(2);
  tft.print("s");
  delay(200);
  while (1)
  {
    buttonStateDown  = digitalRead(buttonPinDown);
    buttonStateUp    = digitalRead(buttonPinUp);
    buttonStateOnOff = digitalRead(buttonPinOnOff);

    if (buttonStateDown == LOW)
    {    
      selector--;
      if (selector == -1)
        selector = 3;
      tft.fillRect(0, 32, 130, 21, BLACK);
      tft.setCursor(0,32);
      tft.setTextSize(3);
      tft.setTextColor(MAINCOLOR);
      tft.print(" ");
      tft.print(array[selector]);
      tft.setTextSize(2);
      tft.print("s");
      delay(200);
    }
  
    if (buttonStateUp == LOW)
    {   
      selector++;
      if (selector == 4)
        selector = 0;
      tft.fillRect(0, 32, 130, 21, BLACK);
      tft.setCursor(0,32);
      tft.setTextSize(3);
      tft.setTextColor(MAINCOLOR);
      tft.print(" ");
      tft.print(array[selector]);
      tft.setTextSize(2);
      tft.print("s");
      delay(200);
    }

    if (buttonStateOnOff == LOW)
    {
      sleepTime = array[selector] * 1000;
      return;
    }
  }
}

/********************************************************************
 * Menu:
 * Switch between F and C   DONE
 * Battery Life             (On main screen?)
 * Low Battery Alert        (On main screen?)
 * Change OLED color        DONE
 * OLED brightness          DONE
 * LP HP Bike               ???
 * 
 * QUESTION: Do we want to enter the menu by just pressing the on/off
 * button? And then holding the on/off button to power on and off?
 * Or do we still want to hold the on/off button to come into the menu?
 ********************************************************************/
void menu()
{
  //delay(500);
  int selector = 0;
  int lastSelector = -1;
  tft.setTextSize(2);
  tft.fillScreen(BLACK);
  drawText("Menu:", MAINCOLOR, 0,  0,   2); 
  tft.fillRect(0, 16, 130, 14, MAINCOLOR);
  tft.setCursor(0,16);
  tft.setTextColor(BLACK);
  tft.print(" Units");
  tft.setCursor(0, 32);
  tft.setTextColor(MAINCOLOR);
  tft.print(" Color");
  tft.setCursor(0, 48);
  tft.print(" Dim");
  tft.setCursor(0, 64);
  tft.print(" Timeout");
  tft.setCursor(0, 80);
  tft.print(" Restore");
  tft.setCursor(0, 96);
  tft.print(" DispType");
  tft.setCursor(0, 112);
  tft.print(" Home");

/*  while (1)
  {
    buttonStateOnOff = digitalRead(buttonPinOnOff);
    if (buttonStateOnOff == HIGH)
      break;
  }
  delay(200);
  */
  
  while (1)
  {
    buttonStateDown  = digitalRead(buttonPinDown);
    buttonStateUp    = digitalRead(buttonPinUp);
    buttonStateOnOff = digitalRead(buttonPinOnOff);
    if (buttonStateDown == LOW)
    {    
      selector++;
      if (selector == 7)
        selector = 0;
      delay(300);
    }
  
    if (buttonStateUp == LOW)
    {   
      selector--;
      if (selector == -1)
        selector = 6;
      delay(300);
    }

    if (buttonStateOnOff == LOW)
    {
      //delay(400);
      if (selector == 0)
      {
        subMenuFC();
        lastSelector = -1;
        return;
      }
      else if (selector == 1)
      {
        changeColor();
        tft.setTextSize(2);
        lastSelector = -1;
        return;
      }
      else if (selector == 2)
      {
        changeBrightness();
        lastSelector = -1;
        return;
      }
      else if (selector == 3)
      {
        screenTimeout();
        return;
      }
      else if (selector == 4)
      {
        temp = 75;
        celcius = 0;
        MAINCOLOR = BLUE;
        brightness = 15;
        sleepTime = 15000;
        dispType = 0; // not using this yet...
        return;
      }
      else if (selector == 5)
      {
        
        return;
      }
      else if (selector == 6)
      {

        return;
      }
    }
    
    if (selector == 0 && selector != lastSelector)
    {
       // the reason I commented out this code below instead of deleting
       // it is because if I want to be able to come back to the menu
       // from a sub-menu, then this code would be needed to print 
       // the initial screen. But since the sub-menus all just exit
       // back to the home screen right now, this code is not needed.
       // And it actually looks better with out it coming in from 
       // the main screen. Refreshes less. 
       /*
      if (lastSelector == -1)
      {
        tft.fillRect(0, 16, 96, 14, MAINCOLOR);
        tft.setCursor(0,16);
        tft.setTextColor(BLACK);
        tft.print(" ");
        tft.print((char)247);
        tft.print("F/");
        tft.print((char)247);
        tft.print("C");
        tft.setCursor(0, 32);
        tft.setTextColor(MAINCOLOR);
        tft.print(" Color");
        tft.setCursor(0, 48);
        tft.print(" Dim   v");
      }
      */
      if (lastSelector == 1) 
      {
        tft.fillRect(0, 32, 130, 14, BLACK);
        tft.setCursor(0, 32);
        tft.setTextColor(MAINCOLOR);
        tft.print(" Color");
        tft.fillRect(0, 16, 130, 14, MAINCOLOR);
        tft.setCursor(0, 16);
        tft.setTextColor(BLACK);
        tft.print(" Units");
      }
      else if (lastSelector == 6)
      {
        tft.fillRect(0, 112, 130, 14, BLACK);
        tft.setCursor(0,112);
        tft.setTextColor(MAINCOLOR);
        tft.print(" Home");
        tft.fillRect(0, 16, 130, 14, MAINCOLOR);
        tft.setCursor(0, 16);
        tft.setTextColor(BLACK);
        tft.print(" Units");
      }
      
    }
    else if (selector == 1 && selector != lastSelector)
    {
      if (lastSelector == 0)
      {
        tft.fillRect(0, 16, 130, 14, BLACK);
        tft.setCursor(0,16);
        tft.setTextColor(MAINCOLOR);
        tft.print(" Units");
      }
      else if (lastSelector == 2)
      {
        tft.fillRect(0, 48, 130, 14, BLACK);
        tft.setCursor(0, 48);
        tft.setTextColor(MAINCOLOR);
        tft.print(" Dim");
      }
        
      tft.fillRect(0, 32, 130, 14, MAINCOLOR); // Select option in MAINCOLOR.
      tft.setCursor(0, 32);
      tft.setTextColor(BLACK);
      tft.print(" Color");
    }
    else if (selector == 2 && selector != lastSelector)
    {
      if (lastSelector == 1)
      {
        tft.fillRect(0, 32, 130, 14, BLACK); // clear "color" option
        tft.setCursor(0,32);
        tft.setTextColor(MAINCOLOR);
        tft.print(" Color");
      }
      else if (lastSelector == 3)
      {
        tft.fillRect(0, 64, 130, 14, BLACK); // clear "color" option
        tft.setCursor(0,64);
        tft.setTextColor(MAINCOLOR);
        tft.print(" Timeout");
      }
        
      tft.fillRect(0, 48, 130, 14, MAINCOLOR); // Select option in MAINCOLOR.
      tft.setCursor(0, 48);
      tft.setTextColor(BLACK);
      tft.print(" Dim");
    }
    else if (selector == 3 && selector != lastSelector) // Time out option:
    {
      if (lastSelector == 2)
      {
        tft.fillRect(0, 48, 130, 14, BLACK);
        tft.setCursor(0, 48);
        tft.setTextColor(MAINCOLOR);
        tft.print(" Dim");
      }
      else if (lastSelector == 4)
      {
        tft.fillRect(0, 80, 130, 14, BLACK);
        tft.setCursor(0, 80);
        tft.setTextColor(MAINCOLOR);
        tft.print(" Restore");
      }
      
      tft.fillRect(0, 64, 130, 14, MAINCOLOR);
      tft.setCursor(0,64);
      tft.setTextColor(BLACK);
      tft.print(" Timeout");
    }
    else if (selector == 4 && selector != lastSelector) // Restore option:
    { 
      if (lastSelector == 3)
      {
        tft.fillRect(0, 64, 130, 14, BLACK); // clear "color" option
        tft.setCursor(0,64);
        tft.setTextColor(MAINCOLOR);
        tft.print(" Timeout");
      }
      else if (lastSelector == 5)
      {
        tft.fillRect(0, 96, 130, 14, BLACK); // clear "color" option
        tft.setCursor(0,96);
        tft.setTextColor(MAINCOLOR);
        tft.print(" DispType");
      }
        
      tft.fillRect(0, 80, 130, 14, MAINCOLOR); // Select option in MAINCOLOR.
      tft.setCursor(0, 80);
      tft.setTextColor(BLACK);
      tft.print(" Restore");
    }
    else if (selector == 5 && selector != lastSelector)
    {
      if (lastSelector == 4)
      {
        tft.fillRect(0, 80, 130, 14, BLACK); // clear "color" option
        tft.setCursor(0,80);
        tft.setTextColor(MAINCOLOR);
        tft.print(" Restore");
      }
      else if (lastSelector == 6)
      {
        tft.fillRect(0, 112, 130, 14, BLACK); // clear "color" option
        tft.setCursor(0,112);
        tft.setTextColor(MAINCOLOR);
        tft.print(" Home");
      }
        
      tft.fillRect(0, 96, 130, 14, MAINCOLOR); // Select option in MAINCOLOR.
      tft.setCursor(0, 96);
      tft.setTextColor(BLACK);
      tft.print(" DispType");
    }
    else if (selector == 6 && selector != lastSelector)
    {
      if (lastSelector == 5)
      {
        tft.fillRect(0, 96, 130, 14, BLACK); // clear "color" option
        tft.setCursor(0,96);
        tft.setTextColor(MAINCOLOR);
        tft.print(" DispType");
      }
      else if (lastSelector == 0)
      {
        tft.fillRect(0, 16, 130, 14, BLACK); // clear "color" option
        tft.setCursor(0,16);
        tft.setTextColor(MAINCOLOR);
        tft.print(" Units");
      }
        
      tft.fillRect(0, 112, 130, 14, MAINCOLOR); // Select option in MAINCOLOR.
      tft.setCursor(0,112);
      tft.setTextColor(BLACK);
      tft.print(" Home");
    }
    lastSelector = selector;
  }
}

/***************************************************************
 * When temp rises to 95, a sun appears on the screen, it will go 
 * away when temp falls below 95 again.
 ***************************************************************/
/*void hot(int color)
{ 
  //  -30, -70
  // tft.fillCircle(105, 80, 15, color); // old
  tft.fillCircle(75, 10, 10, color);
  tft.drawLine( 82-30, 80-70,  90-30,  80-70, color); // left 
  tft.drawLine(105-30, 95-70, 105-30, 102-70, color); // down
  tft.drawLine(120-30, 80-70, 128-30,  80-70, color); // right
  tft.drawLine(105-30, 58-70, 105-30,  65-70, color); // up
  tft.drawLine( 89-30, 64-70,  94-30,  69-70, color); // top left
  tft.drawLine(121-30, 64-70, 116-30,  69-70, color); // top right
  tft.drawLine( 95-30, 91-70,  90-30,  96-70, color); // bottom left
  tft.drawLine(116-30, 90-70, 121-30,  95-70, color); // bottom right

  if (color == YELLOW)
    tft.fillRect(0, 53, 130, 20, Orange);
  else
    tft.fillRect(0, 53, 130, 20, BLACK);  
}*/

/***************************************************************
 * When temp drops to 32, snow appears on the screen, it will go 
 * away when temp rises above 32 again.
 ***************************************************************/
/*void snow(int color)
{
  for (int i = 0; i < numSnowFlakes; i++)
    tft.drawPixel(snowflake[i].x, snowflake[i].y, color);
  if (celcius)  
    printTempUp(temp, 'c');
  else
    printTempUp(temp, 'f');
  //               x,   y,  r, color
  tft.fillCircle(120, 80, 25, color);
  tft.fillCircle(100, 80, 23, color);
  tft.fillCircle(80,  80, 25, color);
  tft.fillCircle(60,  80, 23, color);
  tft.fillCircle(40,  80, 24, color);
  tft.fillCircle(20,  80, 22, color);
  tft.fillCircle(0,   80, 25, color);
}*/

/****************************************************************
 * Called when plus button is pressed. Prints an up arrow to signify
 * tempurature being increased.
 ****************************************************************/
void upArrow()
{
  //                x1, y1,  x2, y2,  x3, y3, color
  tft.fillTriangle(120, 60, 100, 60, 110, 27, RED);
  delay(300); // wait .3 seconds before erasing it
  tft.fillRect(99, 27, 22, 34, BLACK); // erase the triangle
}

/****************************************************************
 * Called when minus button is pressed. Prints a down arrow to signify
 * tempurature being decreased.
 ****************************************************************/
void downArrow()
{
  //                x1, y1,  x2, y2,  x3, y3, color
  tft.fillTriangle(120, 27, 100, 27, 110, 60, BLUE);
  delay(300); // wait .3 seconds before erasing it
  tft.fillRect(99, 27, 22, 34, BLACK); // erase the triangle
}

/****************************************************************
 * Called when minus button is pressed. First prints a black rectangle
 * to erase previous tempurature, then prints the new increased temp.
 ****************************************************************/
void printTempDown(int temp, char c) 
{
  if (temp == 99 && previousTemp == 100)
    tft.fillRect(5, 35, 25, 35, BLACK);
  if (temp % 10 == 9) // need to erase 10's digit
    //           x,   y,  w,  h, color
    tft.fillRect(35, 35, 55, 35, BLACK);
  else
    tft.fillRect(65, 35, 25, 35, BLACK);
  printTemp(temp,c);
}

/****************************************************************
 * Called when plus button is pressed. First prints a black rectangle
 * to erase previous tempurature, then prints the new decreased temp.
 ****************************************************************/
void printTempUp(int temp, char c) 
{
  if (temp % 10 == 0) // need to erase 10's digit
    //           x,   y,  w,  h, color
    tft.fillRect(35, 35, 55, 35, BLACK);
  else
    tft.fillRect(65, 35, 25, 35, BLACK);
  printTemp(temp, c);
}


/****************************************************************
 * Called from printTempUp/Down. Simply just prints the number in 
 * a default format of blue
 ****************************************************************/
void printTemp(int temp, char c)
{
  // cordinates(x, y)
  if (temp < 100)
  {
  tft.setCursor(35,35);    // bring it down to middle of screen
  tft.setTextSize(5);     // size 4 is pretty big
  tft.setTextColor(MAINCOLOR); 
  tft.print(temp);      // temp
  tft.setTextSize(2);
  tft.print((char)247);   // character value of degree symbol
  if (c == 'c')
    tft.print("C");         // F for Farenhieght
  else
    tft.print("F");
  }
  else
  {
  tft.setCursor(5,35);    // bring it down to middle of screen
  tft.setTextSize(5);     // size 4 is pretty big
  tft.setTextColor(MAINCOLOR); 
  tft.print(temp);      // temp
  tft.setTextSize(2);
  tft.print((char)247);   // character value of degree symbol
  if (c == 'c')
    tft.print("C");         // F for Farenhieght
  else
    tft.print("F");
  }
}

/****************************************************************
 * Used to print any random text to the screen like: "Temp:"
 * Or low fluid warning.
 ****************************************************************/
void drawText(char *text, uint16_t color, int x, int y, int size) 
{
  tft.setTextSize(size);
  tft.setCursor(x,y);
  tft.setTextColor(color);
  tft.print(text);
}

/**************************
 * used to send signal to device
 **************************/
void RFduinoGZLL_onReceive(device_t device, int rssi, char *data, int len)
{
  // piggyback the current Host Button A state on the acknowledgement sent
  // back to the Device
  RFduinoGZLL.sendToDevice(device, state);
  //state = -1;
  
}
